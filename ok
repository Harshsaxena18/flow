const onDeleteNodeCallback = (id) => {
  setElements((elements) => {
    const clonedElements = _.cloneDeep(elements);

    // Find the node to delete (must be a node, not an edge)
    const nodeToDelete = clonedElements.find((x) => x.id === id && x.position);
    if (!nodeToDelete) return clonedElements;

    // Get edges that go into and out of the node
    const incomingEdges = clonedElements.filter((el) => el.target === id);
    const outgoingEdges = clonedElements.filter((el) => el.source === id);

    // Pick one outgoing edge to reconnect (prefer the one labeled "Yes" or with a clear condition)
    const preferredEdge =
      outgoingEdges.find((e) =>
        (e.data?.condition || e.label || '').toLowerCase().includes('yes')
      ) || outgoingEdges[0];

    // If there's one incoming edge and one chosen outgoing edge, merge them
    const newEdge =
      incomingEdges.length && preferredEdge
        ? {
            id: `e${incomingEdges[0].source}-${preferredEdge.target}`,
            source: incomingEdges[0].source,
            target: preferredEdge.target,
            type: 'condition',
            data: {
              ...preferredEdge.data, // retain callbacks
            },
            label: preferredEdge.label || '', // optional: preserve edge label
          }
        : null;

    // Remove the node and all its related edges
    const filtered = clonedElements.filter(
      (el) => el.id !== id && el.source !== id && el.target !== id
    );

    // Add the new merged edge if applicable
    if (newEdge) filtered.push(newEdge);

    return filtered;
  });
};
